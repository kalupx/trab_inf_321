<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<div class="d-flex w-100">
    <!-- Menu Lateral -->
    {{> menu}}

    <!-- Conteúdo Principal -->
    <div class="container d-flex align-items-center justify-content-start flex-column" style="height: 100vh;">
        {{> relatorio}}
        <div class="container d-flex justify-content-between align-items-center" style="height: 65%;">
            <div class="card" style="width: 50%; padding: 1rem; border-radius: 15px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); background-color: #f8f9fa;">
                <h5 style="margin-bottom: 20px; text-align: center; font-weight: bold;">Despesas por categoria</h5>
                <div style="width: 300px; margin: 0 auto;">
                    <canvas id="myChart"></canvas>
                </div>
                <a href="#" style="text-align: center; display: block; margin-top: 20px; color: purple; font-weight: bold; text-decoration: none;">VER MAIS</a>
            </div>

            <!-- Texto à direita -->
            <h1 class="display-4 fw-bold" style="color: #6a0dad;">Olá {{userData.nome}}</h1>
        </div>


    </div>
</div>

<style>
    body {
        margin: 0;
        background-color: #f8f9fa;
    }

    .nav-link {
        padding: 10px 20px;
        font-size: 18px;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

    .nav-link:hover {
        background-color: #495057;
    }

    .container {
        padding-left: 20px;
    }
</style>


<script>
    const despesas = {{{json despesas}}};
    console.log("DESPESAS, ", despesas)
    const categorias = [...new Set(despesas.map(despesa => despesa.categoria))];  
    console.log("CATEGORIAS: ", categorias)
    const valores = categorias.map(categoria => {
        return despesas
            .filter(despesa => despesa.categoria === categoria)  // Filtra despesas por categoria
            .reduce((total, despesa) => total + parseFloat(despesa.valor), 0);  // Soma os valores por categoria
    });

    // Obtendo o contexto do canvas
    const ctx = document.getElementById('myChart').getContext('2d');

    // Criando o gráfico com Chart.js
    new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: categorias,
            datasets: [{
                data: valores,
                backgroundColor: ['#1c2541', '#3a506b', '#5bc0be', '#0b132b', '#6a0dad'],
                borderColor: '#ffffff',
                borderWidth: 2,
                hoverOffset: 10 // Aumenta o destaque ao passar o mouse
            }]
        },
        options: {
            responsive: true,
            cutout: '70%', // Define o espaço interno para texto centralizado
            plugins: {
                legend: {
                    display: false // Remove a legenda
                },
                tooltip: {
                    backgroundColor: '#3a506b',
                    titleColor: '#ffffff',
                    bodyColor: '#ffffff',
                    borderWidth: 1,
                    borderColor: '#6a0dad'
                },
                // Texto central no gráfico
                beforeDraw: (chart) => {
                    const { width } = chart;
                    const { height } = chart;
                    const ctx = chart.ctx;
                    ctx.restore();
                    const fontSize = (height / 100).toFixed(2);
                    ctx.font = `${fontSize}rem sans-serif`;
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = '#000000';
                    const text = `R$ ${valores.reduce((acc, val) => acc + val, 0).toFixed(2)}`;
                    const textX = Math.round((width - ctx.measureText(text).width) / 2);
                    const textY = height / 2 - 10; // Centraliza verticalmente
                    ctx.fillText(text, textX, textY);
                    ctx.font = 'bold 1rem sans-serif';
                    ctx.fillText('Total', textX, textY + 20); // Texto abaixo do valor
                    ctx.save();
                }
            },
            layout: {
                padding: {
                    top: 20,
                    bottom: 40
                }
            }
        }
    });

</script>